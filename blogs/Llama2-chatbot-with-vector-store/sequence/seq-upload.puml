@startuml Sequence Diagram - Sprites

!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/master/dist
!includeurl AWSPuml/AWSCommon.puml
!includeurl AWSPuml/Compute/all.puml
!includeurl AWSPuml/Mobile/APIGateway.puml
!includeurl AWSPuml/General/InternetGateway.puml
!includeurl AWSPuml/Database/Database.puml
!includeurl AWSPuml/Database/DynamoDB.puml
!includeurl AWSPuml/Database/ElastiCache.puml
!includeurl AWSPuml/Storage/SimpleStorageServiceS3.puml
!includeurl AWSPuml/NetworkingAndContentDelivery/CloudFront.puml
!includeurl AWSPuml/ApplicationIntegration/SNS.puml
!includeurl AWSPuml/MachineLearning/Rekognition.puml
!includeurl AWSPuml/MachineLearning/Polly.puml
!includeurl AWSPuml/ApplicationIntegration/SQS.puml
!includeurl AWSPuml/MachineLearning/SageMaker.puml

'Comment out to use default PlantUML sequence formatting
skinparam participant {
    BackgroundColor AWS_BG_COLOR
    BorderColor AWS_BORDER_COLOR
}
'Hide the bottom boxes
hide footbox

actor User as user
participant "<color:#magenta><$CloudFront></color>\nAmazon CloudFront" as cdn
participant "<color:#red><$APIGateway>\nAmazon API Gateway" as api
participant "<color:#D86613><$Lambda></color>\nAmazon Lambda\n(upload)" as lambdaUpload
participant "<color:#green><$SimpleStorageServiceS3></color>\nAmazon S3" as s3
participant "<color:#D86613><$Lambda></color>\nAmazon Lambda\n(chat)" as lambdaChat
participant "<color:#D86613><$Database></color>\nVector Store" as vectorstore
participant "<color:#green><$SageMaker></color>\nEmbedding" as embedding
participant "<color:#green><$SageMaker></color>\nLLM" as llm
participant "<color:#blue><$DynamoDB></color>\nDynamoDB" as dynamodb

user -> cdn: POST /upload

cdn -> api: POST /upload

api -> lambdaUpload ++ : Invokes lambda

lambdaUpload -> api --: 200OK (presigned url)

api -> cdn: 200OK (presigned url)

cdn -> user: 200OK (presigned url)

user -> s3 ++: PUT document \nusing presigned url
s3 --> user --: 200OK

user -> cdn: POST /chat \n(type: document)

cdn -> api: POST /chat \n(type: document)

api -> lambdaChat ++: POST /chat \n(type: document)

lambdaChat -> s3 ++: get document

s3 -> lambdaChat --: 200OK

lambdaChat -> lambdaChat: Extract text

lambdaChat -> embedding ++: Embedding
embedding -> lambdaChat --: 200OK

lambdaChat -> vectorstore ++: store document

vectorstore -> lambdaChat --: 200OK

lambdaChat -> llm ++: Summerization

llm -> lambdaChat --: 200OK \n(summerized text)

lambdaChat -> dynamodb ++: Store call log
dynamodb -> lambdaChat --: 200OK


lambdaChat -> api --: 200OK \n(summerized text)

api -> cdn: 200OK \n(summerized text)

cdn -> user: 200OK \n(summerized text)

@enduml